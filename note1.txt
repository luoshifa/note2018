获取键盘值：event.keyCode,event.charCode,event.which
谷歌浏览器兼容三种获取方式。
firefox:event.which.
ie:event.keyCode.

事件源获取：event.srcElement || event.target.

事件监听：
element.attachEvent('on'+elementName,function(){}).
element.addEventListener(eventName,function(){},false).


阻止冒泡事件：e.stopPropagation() || event.cancleBubble=true.

优雅降级和渐进增强:
渐进增强 progressive enhancement：
针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、
交互等改进和追加功能达到更好的用户体验。
优雅降级 graceful degradation：
一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。
区别：
a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给
b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要
c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带

浏览器的内核分别是什么:
IE: trident ['traɪdnt]内核
Firefox：gecko ['gɛko]内核
Safari：webkit内核
Opera：以前是presto ['prɛsto]内核，Opera现已改用Google Chrome的Blink[blɪŋk]内核
Chrome：Blink(基于webkit，Google与Opera Software共同开发)

cookies，sessionStorage和localStorage的区别：
sessionStorage用于本地存储一个会话（session）中的数据，
这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。
因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。
而localStorage用于持久化的本地存储，除非主动删除数据，
否则数据是永远不会过期的。
web storage和cookie的区别
Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。
Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，
这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。
除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，
不像cookie需要前端开发者自己封装setCookie，getCookie。
但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，
作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。

一次完整的HTTP事务是怎样的一个过程：
a. 域名解析
b. 发起TCP的3次握手
1.客户端发送一个链接试探。
2.服务端接收到请求报文后，如果同意链接则发送确认。
3.客户端再次发送确认并发送数据。
c. 建立TCP连接后发起http请求
d. 服务器端响应http请求，浏览器得到html代码
e. 浏览器解析html代码，并请求html代码中的资源
f. 浏览器对页面进行渲染呈现给用户

快速排序：
（1）在数据集之中，选择一个元素作为"基准"。
（2）所有小于"基准"的元素，都移到"基准"的左边；所有大于"基准"的元素，都移到"基准"的右边。
（3）对"基准"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。
var quickSort=function(arr){
            if(arr.length <= 1){
                return arr;
            }
            var middleIndex=Math.floor(arr.length/2);
            var middleValue=arr.splice(middleIndex,1)[0];
            var left=[];
            var right=[];
            for(var i=0,iLen=arr.length;i<iLen;i++)
            {
                if(arr[i] < middleValue)
                {
                    left.push(arr[i]);
                }else{
                    right.push(arr[i]);
                }
            }
            return quickSort(left).concat(middleValue,quickSort(right))
        };

		
box-sizing:
content-box：
padding和border不被包含在定义的width和height之内。
此属性表现为标准模式下的盒模型。
border-box：
padding和border被包含在定义的width和height之内。
此属性表现为怪异模式下的盒模型。

web storage的setItem()的参数是字符串。

Object.create(proto[, propertiesObject])方法会使用指定的原型对象
及其属性去创建一个新的对象。

Object.getPrototypeOf(object)方法返回指定对象的原型（内部[[Prototype]]属性的值）

Object.getOwnPropertyNames(object)返回对象自己的属性的名称。
一个对象的自己的属性是指直接对该对象定义的属性，
而不是从该对象的原型继承的属性。对象的属性包括字段（对象）和函数。

Object.getOwnPropertyDescriptor(obj, prop)方法返回指定对象上一个
自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，
不需要从原型链上进行查找的属性）

Object.defineProperty(obj, prop, descriptor)方法会直接在一个对象上定义
一个新属性，或者修改一个对象的现有属性， 并返回这个对象。

给Object扩展一个方法clone，实现深度克隆对象：
Object.prototype.clone=function(){
    //原型指向保持一致
    var newobj=Object.create(Object.getPrototypeOf(this));
    //自身属性保持一样
    var propNames=Object.getOwnPropertyNames(this);
    propNames.forEach(function(item){
       //保持每个属性的特性也一样
       var des=Object.getOwnPropertyDescriptor(this,item);
       Object.defineProperty(newobj,item,des);
    },this);
    return newobj;
}